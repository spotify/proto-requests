// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SplitModels generated file snapshots: generated//com/test/Model.js 1`] = `
"// THIS FILE IS AUTO-GENERATED BY PROTO-REQUEST
/* eslint-disable */
\\"use strict\\";

Object.defineProperty(exports, '__esModule', { value: true });
var $root = {};
var Model = {};
var InnerModel = {};
var InnerEnum = {};

$root.com = (function() {
    /**
     * Namespace com.
     * @exports com
     * @namespace
     */
    var com = {};

    com.test = (function() {
        /**
         * Namespace test.
         * @memberof com
         * @namespace
         */
        var test = {};

        test.Model = (function() {
            /**
             * Properties of a Model.
             * @memberof com.test
             * @interface IModel
             * @property {string|null} [id] Model id
             * @property {string|null} [name] Model name
             * @property {com.test.Model.InnerModel|null} [innerModel] Model innerModel
             * @property {com.test.UnimportedModel|null} [unimportedModel] Model unimportedModel
             * @property {string|null} [setId] Model setId
             * @property {string|null} [setName] Model setName
             * @property {com.test.Model.InnerModel|null} [setInnerModel] Model setInnerModel
             * @property {com.test.UnimportedModel|null} [setUnimportedModel] Model setUnimportedModel
             */
            
            /**
             * Constructs a new Model.
             * @memberof com.test
             * @classdesc Represents a Model.
             * @implements IModel
             * @constructor
             * @param {com.test.IModel=} [properties] Properties to set
             */
            function Model(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }


            /**
             * Model id.
             * @member {string} id
             * @memberof com.test.Model
             * @instance
             */
            Model.prototype.id = \\"\\";

            /**
             * Model name.
             * @member {string} name
             * @memberof com.test.Model
             * @instance
             */
            Model.prototype.name = \\"\\";

            /**
             * Model innerModel.
             * @member {com.test.Model.InnerModel} innerModel
             * @memberof com.test.Model
             * @instance
             */
            Model.prototype.innerModel = {};

            /**
             * Model unimportedModel.
             * @member {com.test.UnimportedModel} unimportedModel
             * @memberof com.test.Model
             * @instance
             */
            Model.prototype.unimportedModel = {};


            /**
             * Sets id
             * @function setId
             * @memberof com.test.Model
             * @param {string} value
             * @instance
             * @returns {com.test.Model} Model
             */
            Model.prototype.setId = function(value) {
                this['id'] = value;
                return this;
            };

            /**
             * Sets name
             * @function setName
             * @memberof com.test.Model
             * @param {string} value
             * @instance
             * @returns {com.test.Model} Model
             */
            Model.prototype.setName = function(value) {
                this['name'] = value;
                return this;
            };

            /**
             * Sets innerModel
             * @function setInnerModel
             * @memberof com.test.Model
             * @param {com.test.Model.InnerModel} value
             * @instance
             * @returns {com.test.Model} Model
             */
            Model.prototype.setInnerModel = function(value) {
                this['innerModel'] = value;
                return this;
            };

            /**
             * Sets unimportedModel
             * @function setUnimportedModel
             * @memberof com.test.Model
             * @param {com.test.UnimportedModel} value
             * @instance
             * @returns {com.test.Model} Model
             */
            Model.prototype.setUnimportedModel = function(value) {
                this['unimportedModel'] = value;
                return this;
            };

            /**
             * Converts the Model to an object
             * @function toObject
             * @memberof com.test.Model
             * @instance
             * @returns {object} object
             */
            Model.prototype.toObject = function() {
                return JSON.parse(JSON.stringify(this));
            };


            Model.InnerModel = (function() {
                /**
                 * Properties of a InnerModel.
                 * @memberof com.test.Model
                 * @interface IInnerModel
                 * @property {string|null} [id] InnerModel id
                 * @property {number|null} [count] InnerModel count
                 * @property {com.test.Model.InnerModel.InnerEnum|null} [innerEnum] InnerModel innerEnum
                 * @property {string|null} [setId] InnerModel setId
                 * @property {number|null} [setCount] InnerModel setCount
                 * @property {com.test.Model.InnerModel.InnerEnum|null} [setInnerEnum] InnerModel setInnerEnum
                 */
                
                /**
                 * Constructs a new InnerModel.
                 * @memberof com.test.Model
                 * @classdesc Represents a InnerModel.
                 * @implements IInnerModel
                 * @constructor
                 * @param {com.test.Model.IInnerModel=} [properties] Properties to set
                 */
                function InnerModel(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }


                /**
                 * InnerModel id.
                 * @member {string} id
                 * @memberof com.test.Model.InnerModel
                 * @instance
                 */
                InnerModel.prototype.id = \\"\\";

                /**
                 * InnerModel count.
                 * @member {number} count
                 * @memberof com.test.Model.InnerModel
                 * @instance
                 */
                InnerModel.prototype.count = 0;

                /**
                 * InnerModel innerEnum.
                 * @member {com.test.Model.InnerModel.InnerEnum} innerEnum
                 * @memberof com.test.Model.InnerModel
                 * @instance
                 */
                InnerModel.prototype.innerEnum = {};


                /**
                 * Sets id
                 * @function setId
                 * @memberof com.test.Model.InnerModel
                 * @param {string} value
                 * @instance
                 * @returns {com.test.Model.InnerModel} InnerModel
                 */
                InnerModel.prototype.setId = function(value) {
                    this['id'] = value;
                    return this;
                };

                /**
                 * Sets count
                 * @function setCount
                 * @memberof com.test.Model.InnerModel
                 * @param {number} value
                 * @instance
                 * @returns {com.test.Model.InnerModel} InnerModel
                 */
                InnerModel.prototype.setCount = function(value) {
                    this['count'] = value;
                    return this;
                };

                /**
                 * Sets innerEnum
                 * @function setInnerEnum
                 * @memberof com.test.Model.InnerModel
                 * @param {com.test.Model.InnerModel.InnerEnum} value
                 * @instance
                 * @returns {com.test.Model.InnerModel} InnerModel
                 */
                InnerModel.prototype.setInnerEnum = function(value) {
                    this['innerEnum'] = value;
                    return this;
                };

                /**
                 * Converts the InnerModel to an object
                 * @function toObject
                 * @memberof com.test.Model.InnerModel
                 * @instance
                 * @returns {object} object
                 */
                InnerModel.prototype.toObject = function() {
                    return JSON.parse(JSON.stringify(this));
                };


                /**
                 * InnerEnum enum.
                 * @name com.test.Model.InnerModel.InnerEnum
                 * @enum {string}

                 * @property {string} SHOO=SHOO SHOO value
                 * @property {string} SHWA=SHWA SHWA value
                 * @property {string} SHWE=SHWE SHWE value
                 * @property {string} SHIM=SHIM SHIM value
                 */
                InnerModel.InnerEnum = (function() {
                    var values = {};

                    values[\\"SHOO\\"] = \\"SHOO\\";
                    values[\\"SHWA\\"] = \\"SHWA\\";
                    values[\\"SHWE\\"] = \\"SHWE\\";
                    values[\\"SHIM\\"] = \\"SHIM\\";
                    return values;
                })();
                
                InnerEnum = InnerModel.InnerEnum;
                return InnerModel;
            })();
            
            InnerModel = Model.InnerModel;
            return Model;
        })();
        
        Model = test.Model;
        return test;
    })();

    return com;
})();

exports[\\"$root\\"] = $root;
exports[\\"Model\\"] = Model;
exports[\\"InnerModel\\"] = InnerModel;
exports[\\"InnerEnum\\"] = InnerEnum;
exports[\\"default\\"] = $root;
"
`;

exports[`SplitModels generated file snapshots: generated//com/test/Result.js 1`] = `
"// THIS FILE IS AUTO-GENERATED BY PROTO-REQUEST
/* eslint-disable */
\\"use strict\\";

Object.defineProperty(exports, '__esModule', { value: true });
var $root = {};
var Result = {};
var ResultStatus = {};

$root.com = (function() {
    /**
     * Namespace com.
     * @exports com
     * @namespace
     */
    var com = {};

    com.test = (function() {
        /**
         * Namespace test.
         * @memberof com
         * @namespace
         */
        var test = {};

        test.Result = (function() {
            /**
             * Properties of a Result.
             * @memberof com.test
             * @interface IResult
             * @property {string|null} [id] Result id
             * @property {string|null} [name] Result name
             * @property {com.test.Result.ResultStatus|null} [status] Result status
             * @property {string|null} [setId] Result setId
             * @property {string|null} [setName] Result setName
             * @property {com.test.Result.ResultStatus|null} [setStatus] Result setStatus
             */
            
            /**
             * Constructs a new Result.
             * @memberof com.test
             * @classdesc Represents a Result.
             * @implements IResult
             * @constructor
             * @param {com.test.IResult=} [properties] Properties to set
             */
            function Result(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }


            /**
             * Result id.
             * @member {string} id
             * @memberof com.test.Result
             * @instance
             */
            Result.prototype.id = \\"\\";

            /**
             * Result name.
             * @member {string} name
             * @memberof com.test.Result
             * @instance
             */
            Result.prototype.name = \\"\\";

            /**
             * Result status.
             * @member {com.test.Result.ResultStatus} status
             * @memberof com.test.Result
             * @instance
             */
            Result.prototype.status = {};


            /**
             * Sets id
             * @function setId
             * @memberof com.test.Result
             * @param {string} value
             * @instance
             * @returns {com.test.Result} Result
             */
            Result.prototype.setId = function(value) {
                this['id'] = value;
                return this;
            };

            /**
             * Sets name
             * @function setName
             * @memberof com.test.Result
             * @param {string} value
             * @instance
             * @returns {com.test.Result} Result
             */
            Result.prototype.setName = function(value) {
                this['name'] = value;
                return this;
            };

            /**
             * Sets status
             * @function setStatus
             * @memberof com.test.Result
             * @param {com.test.Result.ResultStatus} value
             * @instance
             * @returns {com.test.Result} Result
             */
            Result.prototype.setStatus = function(value) {
                this['status'] = value;
                return this;
            };

            /**
             * Converts the Result to an object
             * @function toObject
             * @memberof com.test.Result
             * @instance
             * @returns {object} object
             */
            Result.prototype.toObject = function() {
                return JSON.parse(JSON.stringify(this));
            };


            /**
             * ResultStatus enum.
             * @name com.test.Result.ResultStatus
             * @enum {string}

             * @property {string} SUCCESS=SUCCESS SUCCESS value
             * @property {string} FAILURE=FAILURE FAILURE value
             * @property {string} UNKNOWN=UNKNOWN UNKNOWN value
             */
            Result.ResultStatus = (function() {
                var values = {};

                values[\\"SUCCESS\\"] = \\"SUCCESS\\";
                values[\\"FAILURE\\"] = \\"FAILURE\\";
                values[\\"UNKNOWN\\"] = \\"UNKNOWN\\";
                return values;
            })();
            
            ResultStatus = Result.ResultStatus;
            return Result;
        })();
        
        Result = test.Result;
        return test;
    })();

    return com;
})();

exports[\\"$root\\"] = $root;
exports[\\"Result\\"] = Result;
exports[\\"ResultStatus\\"] = ResultStatus;
exports[\\"default\\"] = $root;
"
`;

exports[`SplitModels generated file snapshots: generated//com/test/TestRequest.js 1`] = `
"// THIS FILE IS AUTO-GENERATED BY PROTO-REQUEST
/* eslint-disable */
\\"use strict\\";

Object.defineProperty(exports, '__esModule', { value: true });
var $root = {};
var TestRequest = {};
var InnerThingy = {};
var FlooFlimFlam = {};
var OhHeck = {};
var InnerInnerDoodly = {};
var WellDang = {};

$root.com = (function() {
    /**
     * Namespace com.
     * @exports com
     * @namespace
     */
    var com = {};

    com.test = (function() {
        /**
         * Namespace test.
         * @memberof com
         * @namespace
         */
        var test = {};

        test.TestRequest = (function() {
            /**
             * Properties of a TestRequest.
             * @memberof com.test
             * @interface ITestRequest
             * @property {string|null} [id] TestRequest id
             * @property {string|null} [adAccountId] TestRequest adAccountId
             * @property {com.test.TestRequest.InnerThingy|null} [thingy] TestRequest thingy
             * @property {com.test.TestRequest.FlooFlimFlam|null} [floopy] TestRequest floopy
             * @property {string|null} [setId] TestRequest setId
             * @property {string|null} [setAdAccountId] TestRequest setAdAccountId
             * @property {com.test.TestRequest.InnerThingy|null} [setThingy] TestRequest setThingy
             * @property {com.test.TestRequest.FlooFlimFlam|null} [setFloopy] TestRequest setFloopy
             */
            
            /**
             * Constructs a new TestRequest.
             * @memberof com.test
             * @classdesc Represents a TestRequest.
             * @implements ITestRequest
             * @constructor
             * @param {com.test.ITestRequest=} [properties] Properties to set
             */
            function TestRequest(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }


            /**
             * TestRequest id.
             * @member {string} id
             * @memberof com.test.TestRequest
             * @instance
             */
            TestRequest.prototype.id = \\"\\";

            /**
             * TestRequest adAccountId.
             * @member {string} adAccountId
             * @memberof com.test.TestRequest
             * @instance
             */
            TestRequest.prototype.adAccountId = \\"\\";

            /**
             * TestRequest thingy.
             * @member {com.test.TestRequest.InnerThingy} thingy
             * @memberof com.test.TestRequest
             * @instance
             */
            TestRequest.prototype.thingy = {};

            /**
             * TestRequest floopy.
             * @member {com.test.TestRequest.FlooFlimFlam} floopy
             * @memberof com.test.TestRequest
             * @instance
             */
            TestRequest.prototype.floopy = {};


            /**
             * Sets id
             * @function setId
             * @memberof com.test.TestRequest
             * @param {string} value
             * @instance
             * @returns {com.test.TestRequest} TestRequest
             */
            TestRequest.prototype.setId = function(value) {
                this['id'] = value;
                return this;
            };

            /**
             * Sets adAccountId
             * @function setAdAccountId
             * @memberof com.test.TestRequest
             * @param {string} value
             * @instance
             * @returns {com.test.TestRequest} TestRequest
             */
            TestRequest.prototype.setAdAccountId = function(value) {
                this['adAccountId'] = value;
                return this;
            };

            /**
             * Sets thingy
             * @function setThingy
             * @memberof com.test.TestRequest
             * @param {com.test.TestRequest.InnerThingy} value
             * @instance
             * @returns {com.test.TestRequest} TestRequest
             */
            TestRequest.prototype.setThingy = function(value) {
                this['thingy'] = value;
                return this;
            };

            /**
             * Sets floopy
             * @function setFloopy
             * @memberof com.test.TestRequest
             * @param {com.test.TestRequest.FlooFlimFlam} value
             * @instance
             * @returns {com.test.TestRequest} TestRequest
             */
            TestRequest.prototype.setFloopy = function(value) {
                this['floopy'] = value;
                return this;
            };

            /**
             * Converts the TestRequest to an object
             * @function toObject
             * @memberof com.test.TestRequest
             * @instance
             * @returns {object} object
             */
            TestRequest.prototype.toObject = function() {
                return JSON.parse(JSON.stringify(this));
            };


            TestRequest.InnerThingy = (function() {
                /**
                 * Properties of a InnerThingy.
                 * @memberof com.test.TestRequest
                 * @interface IInnerThingy
                 * @property {string|null} [id] InnerThingy id
                 * @property {string|null} [name] InnerThingy name
                 * @property {string|null} [setId] InnerThingy setId
                 * @property {string|null} [setName] InnerThingy setName
                 */
                
                /**
                 * Constructs a new InnerThingy.
                 * @memberof com.test.TestRequest
                 * @classdesc Represents a InnerThingy.
                 * @implements IInnerThingy
                 * @constructor
                 * @param {com.test.TestRequest.IInnerThingy=} [properties] Properties to set
                 */
                function InnerThingy(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }


                /**
                 * InnerThingy id.
                 * @member {string} id
                 * @memberof com.test.TestRequest.InnerThingy
                 * @instance
                 */
                InnerThingy.prototype.id = \\"\\";

                /**
                 * InnerThingy name.
                 * @member {string} name
                 * @memberof com.test.TestRequest.InnerThingy
                 * @instance
                 */
                InnerThingy.prototype.name = \\"\\";


                /**
                 * Sets id
                 * @function setId
                 * @memberof com.test.TestRequest.InnerThingy
                 * @param {string} value
                 * @instance
                 * @returns {com.test.TestRequest.InnerThingy} InnerThingy
                 */
                InnerThingy.prototype.setId = function(value) {
                    this['id'] = value;
                    return this;
                };

                /**
                 * Sets name
                 * @function setName
                 * @memberof com.test.TestRequest.InnerThingy
                 * @param {string} value
                 * @instance
                 * @returns {com.test.TestRequest.InnerThingy} InnerThingy
                 */
                InnerThingy.prototype.setName = function(value) {
                    this['name'] = value;
                    return this;
                };

                /**
                 * Converts the InnerThingy to an object
                 * @function toObject
                 * @memberof com.test.TestRequest.InnerThingy
                 * @instance
                 * @returns {object} object
                 */
                InnerThingy.prototype.toObject = function() {
                    return JSON.parse(JSON.stringify(this));
                };


                /**
                 * OhHeck enum.
                 * @name com.test.TestRequest.InnerThingy.OhHeck
                 * @enum {string}

                 * @property {string} OH=OH OH value
                 * @property {string} HECK=HECK HECK value
                 */
                InnerThingy.OhHeck = (function() {
                    var values = {};

                    values[\\"OH\\"] = \\"OH\\";
                    values[\\"HECK\\"] = \\"HECK\\";
                    return values;
                })();
                
                OhHeck = InnerThingy.OhHeck;

                InnerThingy.InnerInnerDoodly = (function() {
                    /**
                     * Properties of a InnerInnerDoodly.
                     * @memberof com.test.TestRequest.InnerThingy
                     * @interface IInnerInnerDoodly
                     * @property {string|null} [id] InnerInnerDoodly id
                     * @property {string|null} [fizzzlyy] InnerInnerDoodly fizzzlyy
                     * @property {string|null} [setId] InnerInnerDoodly setId
                     * @property {string|null} [setFizzzlyy] InnerInnerDoodly setFizzzlyy
                     */
                    
                    /**
                     * Constructs a new InnerInnerDoodly.
                     * @memberof com.test.TestRequest.InnerThingy
                     * @classdesc Represents a InnerInnerDoodly.
                     * @implements IInnerInnerDoodly
                     * @constructor
                     * @param {com.test.TestRequest.InnerThingy.IInnerInnerDoodly=} [properties] Properties to set
                     */
                    function InnerInnerDoodly(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }


                    /**
                     * InnerInnerDoodly id.
                     * @member {string} id
                     * @memberof com.test.TestRequest.InnerThingy.InnerInnerDoodly
                     * @instance
                     */
                    InnerInnerDoodly.prototype.id = \\"\\";

                    /**
                     * InnerInnerDoodly fizzzlyy.
                     * @member {string} fizzzlyy
                     * @memberof com.test.TestRequest.InnerThingy.InnerInnerDoodly
                     * @instance
                     */
                    InnerInnerDoodly.prototype.fizzzlyy = \\"\\";


                    /**
                     * Sets id
                     * @function setId
                     * @memberof com.test.TestRequest.InnerThingy.InnerInnerDoodly
                     * @param {string} value
                     * @instance
                     * @returns {com.test.TestRequest.InnerThingy.InnerInnerDoodly} InnerInnerDoodly
                     */
                    InnerInnerDoodly.prototype.setId = function(value) {
                        this['id'] = value;
                        return this;
                    };

                    /**
                     * Sets fizzzlyy
                     * @function setFizzzlyy
                     * @memberof com.test.TestRequest.InnerThingy.InnerInnerDoodly
                     * @param {string} value
                     * @instance
                     * @returns {com.test.TestRequest.InnerThingy.InnerInnerDoodly} InnerInnerDoodly
                     */
                    InnerInnerDoodly.prototype.setFizzzlyy = function(value) {
                        this['fizzzlyy'] = value;
                        return this;
                    };

                    /**
                     * Converts the InnerInnerDoodly to an object
                     * @function toObject
                     * @memberof com.test.TestRequest.InnerThingy.InnerInnerDoodly
                     * @instance
                     * @returns {object} object
                     */
                    InnerInnerDoodly.prototype.toObject = function() {
                        return JSON.parse(JSON.stringify(this));
                    };


                    /**
                     * WellDang enum.
                     * @name com.test.TestRequest.InnerThingy.InnerInnerDoodly.WellDang
                     * @enum {string}

                     * @property {string} WELL=WELL WELL value
                     * @property {string} DANG=DANG DANG value
                     */
                    InnerInnerDoodly.WellDang = (function() {
                        var values = {};

                        values[\\"WELL\\"] = \\"WELL\\";
                        values[\\"DANG\\"] = \\"DANG\\";
                        return values;
                    })();
                    
                    WellDang = InnerInnerDoodly.WellDang;
                    return InnerInnerDoodly;
                })();
                
                InnerInnerDoodly = InnerThingy.InnerInnerDoodly;
                return InnerThingy;
            })();
            
            InnerThingy = TestRequest.InnerThingy;

            /**
             * FlooFlimFlam enum.
             * @name com.test.TestRequest.FlooFlimFlam
             * @enum {string}

             * @property {string} FLOO=FLOO FLOO value
             * @property {string} FLIM=FLIM FLIM value
             * @property {string} FLAM=FLAM FLAM value
             */
            TestRequest.FlooFlimFlam = (function() {
                var values = {};

                values[\\"FLOO\\"] = \\"FLOO\\";
                values[\\"FLIM\\"] = \\"FLIM\\";
                values[\\"FLAM\\"] = \\"FLAM\\";
                return values;
            })();
            
            FlooFlimFlam = TestRequest.FlooFlimFlam;
            return TestRequest;
        })();
        
        TestRequest = test.TestRequest;
        return test;
    })();

    return com;
})();

exports[\\"$root\\"] = $root;
exports[\\"TestRequest\\"] = TestRequest;
exports[\\"InnerThingy\\"] = InnerThingy;
exports[\\"FlooFlimFlam\\"] = FlooFlimFlam;
exports[\\"OhHeck\\"] = OhHeck;
exports[\\"InnerInnerDoodly\\"] = InnerInnerDoodly;
exports[\\"WellDang\\"] = WellDang;
exports[\\"default\\"] = $root;
"
`;

exports[`SplitModels generated file snapshots: generated//com/test/UnimportedModel.js 1`] = `
"// THIS FILE IS AUTO-GENERATED BY PROTO-REQUEST
/* eslint-disable */
\\"use strict\\";

Object.defineProperty(exports, '__esModule', { value: true });
var $root = {};
var UnimportedModel = {};

$root.com = (function() {
    /**
     * Namespace com.
     * @exports com
     * @namespace
     */
    var com = {};

    com.test = (function() {
        /**
         * Namespace test.
         * @memberof com
         * @namespace
         */
        var test = {};

        test.UnimportedModel = (function() {
            /**
             * Properties of a UnimportedModel.
             * @memberof com.test
             * @interface IUnimportedModel
             * @property {string|null} [id] UnimportedModel id
             * @property {string|null} [something] UnimportedModel something
             * @property {number|null} [numberrr] UnimportedModel numberrr
             * @property {string|null} [setId] UnimportedModel setId
             * @property {string|null} [setSomething] UnimportedModel setSomething
             * @property {number|null} [setNumberrr] UnimportedModel setNumberrr
             */
            
            /**
             * Constructs a new UnimportedModel.
             * @memberof com.test
             * @classdesc Represents a UnimportedModel.
             * @implements IUnimportedModel
             * @constructor
             * @param {com.test.IUnimportedModel=} [properties] Properties to set
             */
            function UnimportedModel(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }


            /**
             * UnimportedModel id.
             * @member {string} id
             * @memberof com.test.UnimportedModel
             * @instance
             */
            UnimportedModel.prototype.id = \\"\\";

            /**
             * UnimportedModel something.
             * @member {string} something
             * @memberof com.test.UnimportedModel
             * @instance
             */
            UnimportedModel.prototype.something = \\"\\";

            /**
             * UnimportedModel numberrr.
             * @member {number} numberrr
             * @memberof com.test.UnimportedModel
             * @instance
             */
            UnimportedModel.prototype.numberrr = 0;


            /**
             * Sets id
             * @function setId
             * @memberof com.test.UnimportedModel
             * @param {string} value
             * @instance
             * @returns {com.test.UnimportedModel} UnimportedModel
             */
            UnimportedModel.prototype.setId = function(value) {
                this['id'] = value;
                return this;
            };

            /**
             * Sets something
             * @function setSomething
             * @memberof com.test.UnimportedModel
             * @param {string} value
             * @instance
             * @returns {com.test.UnimportedModel} UnimportedModel
             */
            UnimportedModel.prototype.setSomething = function(value) {
                this['something'] = value;
                return this;
            };

            /**
             * Sets numberrr
             * @function setNumberrr
             * @memberof com.test.UnimportedModel
             * @param {number} value
             * @instance
             * @returns {com.test.UnimportedModel} UnimportedModel
             */
            UnimportedModel.prototype.setNumberrr = function(value) {
                this['numberrr'] = value;
                return this;
            };

            /**
             * Converts the UnimportedModel to an object
             * @function toObject
             * @memberof com.test.UnimportedModel
             * @instance
             * @returns {object} object
             */
            UnimportedModel.prototype.toObject = function() {
                return JSON.parse(JSON.stringify(this));
            };


            return UnimportedModel;
        })();
        
        UnimportedModel = test.UnimportedModel;
        return test;
    })();

    return com;
})();

exports[\\"$root\\"] = $root;
exports[\\"UnimportedModel\\"] = UnimportedModel;
exports[\\"default\\"] = $root;
"
`;

exports[`SplitModels generated file snapshots: generated//google/protobuf/Empty.js 1`] = `
"// THIS FILE IS AUTO-GENERATED BY PROTO-REQUEST
/* eslint-disable */
\\"use strict\\";

Object.defineProperty(exports, '__esModule', { value: true });
var $root = {};
var Empty = {};

$root.google = (function() {
    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    var google = {};

    google.protobuf = (function() {
        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        var protobuf = {};

        protobuf.Empty = (function() {
            /**
             * Properties of a Empty.
             * @memberof google.protobuf
             * @interface IEmpty


             */
            
            /**
             * Constructs a new Empty.
             * @memberof google.protobuf
             * @classdesc Represents a Empty.
             * @implements IEmpty
             * @constructor
             * @param {google.protobuf.IEmpty=} [properties] Properties to set
             */
            function Empty(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }



            /**
             * Converts the Empty to an object
             * @function toObject
             * @memberof google.protobuf.Empty
             * @instance
             * @returns {object} object
             */
            Empty.prototype.toObject = function() {
                return JSON.parse(JSON.stringify(this));
            };


            return Empty;
        })();
        
        Empty = protobuf.Empty;
        return protobuf;
    })();

    return google;
})();

exports[\\"$root\\"] = $root;
exports[\\"Empty\\"] = Empty;
exports[\\"default\\"] = $root;
"
`;
