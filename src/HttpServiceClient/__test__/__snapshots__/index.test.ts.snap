// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HttpServiceClient testservice client snapshot 1`] = `
"
// THIS FILE IS AUTO-GENERATED BY PROTO-REQUEST
/* eslint-disable */
\\"use strict\\";


// Exported root namespace
Object.defineProperty(exports, '__esModule', { value: true });
var $root = {};
var TestService = {};
    

$root.com = (function() {
    /**
     * Namespace com.
     * @exports com
     * @namespace
     */
    var com = {};

    com.test = (function() {
        /**
         * Namespace test.
         * @memberof com
         * @namespace
         */
        var test = {};

        test.TestService = (function() {
                
            /**
             * Properties of a TestService.
             * @memberof com.test
             */
             
             /**
              * Fetch function type, set when instantiating this service class.
              * @callback FetchFunction
              * @param {string} uri
              * @param {Object} options
              * @returns {Promise<any>}
              */
             
            /**
             * An HttpServiceClient class to send requests to the TestService.
             * @memberof com.test
             * @classdesc TestService to send requests to the TestService.
             * @param {FetchFunction} fetchFn
             * @param {protorequest.HttpServiceConfigOptions} options
             * @constructor
             */
            TestService = function(fetchFn, options) {
                this.fetchFn = fetchFn;
                this.host = options.host;
                this.baseUrl = options.baseUrl;
                this.version = options.version || \\"\\";
                this.headers = options.headers || new Headers();
            };
        
            /**
             * Sends the fetch request decorated with the configured host.  Only for internal use.
             */
            TestService.prototype.protoFetch = function(url, opts) {
              return this.fetchFn(this.host + url, opts);
            };
        
            /**
             * Sets the headers to be sent with all requests to this service.
             * @function setHeaders
             * @memberof com.test.TestService
             * @param {Headers} headers
             * @instance
             * @returns {com.test.TestService} TestService
             */
            TestService.prototype.setHeaders = function(headers) {
              this.headers = headers;
              return this;
            };
        
            /**
             * Get the headers being sent with all requests to this service.
             * @function getHeaders
             * @memberof com.test.TestService
             * @instance
             * @returns {Headers}
             */
            TestService.prototype.getHeaders = function() {
              return this.headers;
            };
        
            /**
             * Calls TestService.doSomething
             * @function doSomething
             * @memberof com.test.TestService
             * @param {google.protobuf.Empty} request
             * @instance
             * @returns {Promise<google.protobuf.Empty>} doSomething
             */
            TestService.prototype.doSomething = function(request) {
                const url = '/' + this.baseUrl + '/TestService/' + this.version +  (this.version ? '/' : '') + 'doSomething';
                const opts = {
                    method: 'POST',
                    body: JSON.stringify(request),
                    headers: this.headers
                };
                return this.protoFetch(url, opts)
                    .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
            };

            /**
             * Calls TestService.doSomethingElse
             * @function doSomethingElse
             * @memberof com.test.TestService
             * @param {com.test.Model} request
             * @instance
             * @returns {Promise<com.test.Result>} doSomethingElse
             */
            TestService.prototype.doSomethingElse = function(request) {
                const url = '/' + this.baseUrl + '/TestService/' + this.version +  (this.version ? '/' : '') + 'doSomethingElse';
                const opts = {
                    method: 'POST',
                    body: JSON.stringify(request),
                    headers: this.headers
                };
                return this.protoFetch(url, opts)
                    .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
            };

            return TestService;
        })();

        return test;
    })();

    return com;
})();


exports[\\"default\\"] = $root;
exports[\\"$root\\"] = $root;
exports[\\"TestService\\"] = TestService;
"
`;

exports[`HttpServiceClient testservice custom classes snapshot: HttpServiceConfigOptions 1`] = `
"// THIS FILE IS AUTO-GENERATED BY PROTO-REQUEST
/* eslint-disable */
Object.defineProperty(exports, '__esModule', { value: true });
var $root = {};
var HttpServiceConfigOptions = {};

$root.protorequest = (function() {
  /**
   * Namespace protorequest.
   * @exports protorequest
   * @namespace
   */
  var protorequest = {};

  protorequest.HttpServiceConfigOptions = (function() {
    /**
     * Properties of a HttpServiceConfigOptions.
     * @memberof protorequest
     * @interface IHttpServiceConfigOptions
     * @property {string|null} [host] HttpServiceConfigOptions host
     * @property {string|null} [setHost] HttpServiceConfigOptions setHost
     * @property {string|null} [baseUrl] HttpServiceConfigOptions baseUrl
     * @property {string|null} [setBaseUrl] HttpServiceConfigOptions setBaseUrl
     * @property {string|null} [version] HttpServiceConfigOptions version
     * @property {string|null} [setVersion] HttpServiceConfigOptions setVersion
     * @property {Headers|null} [headers] HttpServiceConfigOptions headers
     * @property {Headers|null} [setHeaders] HttpServiceConfigOptions setHeaders
     */

    /**
     * Constructs a new HttpServiceConfigOptions.
     * @memberof protorequest
     * @classdesc Represents a HttpServiceConfigOptions.
     * @implements IHttpServiceConfigOptions
     * @constructor
     * @param {protorequest.IHttpServiceConfigOptions=} [properties] Properties to set
     */
    function HttpServiceConfigOptions(properties) {
      if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          if (properties[keys[i]] != null)
            this[keys[i]] = properties[keys[i]];
    }

    /**
     * HttpServiceConfigOptions host.
     * @member {string} host
     * @memberof protorequest.HttpServiceConfigOptions
     * @instance
     */
    HttpServiceConfigOptions.prototype.host = '';

    /**
     * Sets host
     * @function setHost
     * @memberof protorequest.HttpServiceConfigOptions
     * @param {string} value
     * @instance
     * @returns {protorequest.HttpServiceConfigOptions} HttpServiceConfigOptions
     */
    HttpServiceConfigOptions.prototype.setHost = function(value) {
      this['host'] = value;
      return this;
    };

    /**
     * HttpServiceConfigOptions baseUrl.
     * @member {string} baseUrl
     * @memberof protorequest.HttpServiceConfigOptions
     * @instance
     */
    HttpServiceConfigOptions.prototype.baseUrl = '';

    /**
     * Sets baseUrl
     * @function setBaseUrl
     * @memberof protorequest.HttpServiceConfigOptions
     * @param {string} value
     * @instance
     * @returns {protorequest.HttpServiceConfigOptions} HttpServiceConfigOptions
     */
    HttpServiceConfigOptions.prototype.setBaseUrl = function(value) {
      this['baseUrl'] = value;
      return this;
    };

    /**
     * HttpServiceConfigOptions version.
     * @member {string} version
     * @memberof protorequest.HttpServiceConfigOptions
     * @instance
     */
    HttpServiceConfigOptions.prototype.version = '';

    /**
     * Sets version
     * @function setVersion
     * @memberof protorequest.HttpServiceConfigOptions
     * @param {string} value
     * @instance
     * @returns {protorequest.HttpServiceConfigOptions} HttpServiceConfigOptions
     */
    HttpServiceConfigOptions.prototype.setVersion = function(value) {
      this['version'] = value;
      return this;
    };

    /**
     * HttpServiceConfigOptions headers.
     * @member {Headers} headers
     * @memberof protorequest.HttpServiceConfigOptions
     * @instance
     */
    HttpServiceConfigOptions.prototype.headers = '';

    /**
     * Sets headers
     * @function setHeaders
     * @memberof protorequest.HttpServiceConfigOptions
     * @param {Headers} value
     * @instance
     * @returns {protorequest.HttpServiceConfigOptions} HttpServiceConfigOptions
     */
    HttpServiceConfigOptions.prototype.setHeaders = function(value) {
      this['headers'] = value;
      return this;
    };

    /**
     * Converts the HttpServiceConfigOptions to an object
     * @function toObject
     * @memberof protorequest.HttpServiceConfigOptions
     * @instance
     * @returns {object} object
     */
    HttpServiceConfigOptions.prototype.toObject = function() {
      return JSON.parse(JSON.stringify(this));
    };

    return HttpServiceConfigOptions;
  })();

  HttpServiceConfigOptions = protorequest.HttpServiceConfigOptions;

  return protorequest;

})();

exports[\\"$root\\"] = $root;
exports[\\"HttpServiceConfigOptions\\"] = HttpServiceConfigOptions;
exports[\\"default\\"] = $root;
"
`;
